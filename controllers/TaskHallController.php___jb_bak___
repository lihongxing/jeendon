<?php

namespace app\controllers;

use app\common\base\FrontendbaseController;
use app\models\DemandReleaseFile;
use app\models\Offer;
use app\models\Procedure;
use app\models\Task;
use xiaohei\captcha\Captcha;
use yii\data\Pagination;
use yii;

class TaskHallController extends FrontendbaseController
{
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ]
        ];
    }

    public function actionHallIndex($keyword = '', $status = '' , $type = '', $keysearch = ''){

        $Taskmodel = new Task();
        $query = new\yii\db\Query();
        $query = $query->select(['{{%order}}.*', '{{%spare_parts}}.*'])
            ->from('{{%spare_parts}}')
            ->join('LEFT JOIN', '{{%order}}', '{{%order}}.order_id = {{%spare_parts}}.task_order_id')
            ->join('LEFT JOIN', '{{%employer}}', '{{%employer}}.id = {{%spare_parts}}.task_employer_id')
            ->where(['>','order_status', 100])
            ->orderBy('order_add_time DESC');

        if(!empty($type)){
            $query = $query->andWhere(['order_type' => $type]);
        }
        if(!empty($keyword)){
            $query = $query->andWhere(['or',
                ['like', 'task_parts_id', $keyword]
            ]);
        }

        if(!empty($keysearch)){
            $query = $query->andWhere(['or',
                ['like', 'task_parts_id', $keysearch],
                ['like', 'username', $keysearch],
            ]);
        }
        $time = time();
        if(!empty($status)){
            if($status == 1){
                $query = $query->andWhere(
                    ['between', 'task_status', 101, 102]
                );
                $query = $query->andWhere("order_expiration_time >= {$time}");
            }else{
                $query = $query->andWhere(['between', 'task_status', 103, 110]);
                $query = $query->andWhere(['<>', 'task_status', 109]);
            }

        }
        $countQuery = clone $query;
        $pages = new Pagination(['defaultPageSize' => 20, 'totalCount' => $countQuery->count()]);
        $tasklist = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        $tasklist = $Taskmodel->TaskConversionChinese($tasklist);

        foreach($tasklist as $i => &$task){
            //计算任务报价工程师数量
            $query = new\yii\db\Query();
            $query = $query->from('{{%offer}}')
                ->join('LEFT JOIN', '{{%task}}', '{{%offer}}.offer_task_id = {{%task}}.task_id')
                ->join('LEFT JOIN', '{{%engineer}}', '{{%offer}}.offer_eng_id = {{%engineer}}.id')
                ->where(['offer_task_id' => $task['task_id']]);
            $countQuery = clone $query;
            $totalCount = $countQuery->count();
            $task['totalCount'] = $totalCount;
        }
        //echo "<pre>";print_r($tasklist);echo "<pre>";
        return $this->render('hall-index',[
            'pages' => $pages,
            'tasklist' => $tasklist,
            'keyword' => $keyword,
            'status' => $status,
            'type' => $type,
        ]);
    }

    /**
     * @param $task_id
     * @return string
     * 任务详细页面
     */
    public function actionHallDetail($task_id)
    {

        if(yii::$app->request->isAjax){
            $offer_status = yii::$app->request->get('offer_status');
            $query = new\yii\db\Query();
            $query = $query->select(['{{%offer}}.*', '{{%task}}.*', '{{%engineer}}.*'])
                ->from('{{%offer}}')
                ->join('LEFT JOIN', '{{%task}}', '{{%offer}}.offer_task_id = {{%task}}.task_id')
                ->join('LEFT JOIN', '{{%engineer}}', '{{%offer}}.offer_eng_id = {{%engineer}}.id')
                ->where(['offer_task_id' => $task_id]);
            if(!empty($offer_status)){
                $query = $query->andWhere(['offer_status' => $offer_status]);
            }
            $countQuery = clone $query;
            $totalCount = $countQuery->count();
            $pages = new Pagination(['defaultPageSize' => 1, 'totalCount' => $totalCount]);
            $offerlist = $query->offset($pages->offset)
                ->limit($pages->limit)
                ->all();
            return $this->renderPartial('engineer-offer',[
                'pages' => $pages,
                'offerlist' => $offerlist
            ]);
        }else{
            $query = new\yii\db\Query();
            $task = $query->select(['{{%order}}.*', '{{%spare_parts}}.*','{{%employer}}.*'])
                ->from('{{%spare_parts}}')
                ->where(['{{%spare_parts}}.task_id' => $task_id])
                ->join('LEFT JOIN', '{{%order}}', '{{%order}}.order_id = {{%spare_parts}}.task_order_id')
                ->join('LEFT JOIN', '{{%employer}}', '{{%order}}.order_employer_id = {{%employer}}.id')
                ->one();
            $Taskmodel = new Task();
            $task = $Taskmodel->TaskConversionChinese($task, 2, 1);

            //查询零件对应的工序信息
            $procedures = Procedure::find()
                ->where(['task_part_id' => $task_id])
                ->asArray()
                ->all();
            $procedures = $Taskmodel->TaskConversionChinese($procedures);
            //print_r($procedures);die;
            $task['procedures'] = $procedures;
            //echo "<pre>";print_r($task);echo "<pre>";die;
            $query = new\yii\db\Query();
            $query = $query->select(['{{%offer}}.*', '{{%task}}.*', '{{%engineer}}.*'])
                ->from('{{%offer}}')
                ->join('LEFT JOIN', '{{%task}}', '{{%offer}}.offer_task_id = {{%task}}.task_id')
                ->join('LEFT JOIN', '{{%engineer}}', '{{%offer}}.offer_eng_id = {{%engineer}}.id')
                ->where(['offer_task_id' => $task_id]);
            $countQuery = clone $query;
            $totalCount = $countQuery->count();
            $pages = new Pagination(['defaultPageSize' => 1, 'totalCount' => $totalCount]);
            $offerlist = $query->offset($pages->offset)
                ->limit($pages->limit)
                ->all();
            $results = [
                'task' => $task,
                'pages' => $pages,
                'offerlist' => $offerlist,
                'totalCount' => $totalCount
            ];
            //查询中标的数量
            $Offermodel = new Offer();
            $successoffercount = $Offermodel->find()
                ->where(['offer_task_id' => $task_id, 'offer_status' => 100])
                ->count();
            $results['successoffercount'] = $successoffercount;
            if(!empty(yii::$app->engineer->identity->id)){
                //判断当前工程师是否对已经对该任务报价
                $Offermodel = new Offer();
                $count = $Offermodel->find()
                    ->where(['offer_eng_id' => yii::$app->engineer->identity->id, 'offer_task_id' => $task_id])
                    ->count();
                if($count > 0){
                    $results['mycan'] = 101;
                }else{
                    $results['mycan'] = 100;
                }
            }
            //查询技术要求或审图意见
            //获取雇主上传接口上传文件信息
            $DemandReleaseFilemodel = new DemandReleaseFile();
            $DemandReleaseFiles = $DemandReleaseFilemodel->find()
                ->where(['drf_order_number' => $task['order_number']])
                ->asArray()
                ->all();
            //echo "<pre>";print_r($results);echo "</pre>";die;
            $results['DemandReleaseFiles'] = $DemandReleaseFiles;
            //echo "<pre>";print_r($results);echo "<pre>";die;
            return $this->render('hall-detail', $results);
        }
    }

    /**
     * 工程师报价
     * @param yzm 报价图片验证码
     * @param task_id 任务id(零件表id 任务以零件为单位)
     * @param offer_money 报价金额
     * @return view
     */
    public function actionEngineerOffer(){
        $post = yii::$app->request->post();
        if(!Captcha::check($post['yzm'])){
            return $this->error('验证码不正确');
        }
        //投标报价条件判断
        if(empty($post['offer_whether_hide'])){
            $offer_whether_hide = 101;
        }else{
            $offer_whether_hide = 100;
        }
        //判断议价  还是首次报价
        $Offermodel = new Offer();
        $offer_id = $post['offer_id'];
        if(!empty($offer_id)){
            $offer = $Offermodel->find()
                ->where(['offer_id' => $offer_id,'offer_eng_id' => yii::$app->engineer->identity->id])
                ->asArray()
                ->one();
            if(empty($offer)){
                return $this->error('议价信息错误');
            }
            //判断信息是否错误（议价offer_id:是否是当前登录用户所有）
            $count = $Offermodel->updateAll(
                [
                    'offer_money' => intval($post['offer_money_eng']),
                    'offer_bargain_time' => time(),
                    'offer_cycle' => $post['offer_cycle'],
                    'offer_explain' => $post['offer_explain'],
                    'offer_bargain_status' => 101,
                    'offer_money_eng' => $post['offer_money_eng'],
                    'offer_bargain_before_money' => $offer['offer_money'],
                    'offer_money_before_eng' => $offer['offer_money_eng'],
                ],
                'offer_id = :offer_id AND offer_eng_id = :offer_eng_id',
                [
                    ':offer_id' => $offer_id,
                    ':offer_eng_id' => yii::$app->engineer->identity->id
                ]
            );
            if($count > 0){
                return $this->success('议价成功');
            }else{
                return $this->error('议价失败');
            }
        }else{
            //判断是否是认证工程师
            if(yii::$app->engineer->identity->eng_examine_status != 103){
                return $this->error('您还没有认证，不允许报价，请认证后再来！');
            }
            //判断当前工程师是否对已经对该任务报价
            $Offermodel = new Offer();
            $count = $Offermodel->find()
                ->where(['offer_eng_id' => yii::$app->engineer->identity->id, 'offer_task_id' => $post['task_id']])
                ->count();
            if($count > 0){
                return $this->error('对不起，您已经参与报价，请不要重复报价！');
            }
            if(yii::$app->engineer->identity->eng_status == 2 && yii::$app->engineer->identity->eng_examine_type == 1){
                return $this->error('对不起，您还有完成的任务！暂时不能参与报价');
            }
            $Offermodel->setAttribute('offer_money', intval($post['offer_money_eng']));
            $Offermodel->setAttribute('offer_add_time', time());
            $Offermodel->setAttribute('offer_whether_hide', $offer_whether_hide);
            $Offermodel->setAttribute('offer_task_id', $post['task_id']);
            $Offermodel->setAttribute('offer_cycle', $post['offer_cycle']);
            $Offermodel->setAttribute('offer_explain', $post['offer_explain']);
            $Offermodel->setAttribute('offer_money_eng', $post['offer_money_eng']);
            $Offermodel->setAttribute('offer_eng_id', yii::$app->engineer->identity->id);
            if($Offermodel->save()){
                return $this->success('报价成功');
            }else{
                return $this->error('报价失败');
            }
        }
    }
}